<#
.SYNOPSIS
    83 Network Operation Sqadron Server Health Check
.DESCRIPTION
    This tool is used to check the Uptime, CPU Load, Disk Space, Replication, Network Connectivity on Domain Controllers and DHCP servers
.NOTES
    Created by Spencer A. Heath
#>
# This just stops the progress bars from showing when running Get-NetConnection
$Global:ProgressPreference = 'SilentlyContinue'
# ISE Sucks, Dont use ISE
if ($PSISE) {
    Write-Host "Please do not run in Powershell ISE, it is a depreciated program" -ForegroundColor Red
    break
}
#Creating a new Temp Module path to import.
$FindtheModule = Test-Path $PSScriptRoot\Modules\HealthCheckModules\HealthCheckModules.psd1
if ($FindtheModule -eq $true) {
    $env:PSModulePath = $Env:PSModulePath + ";$PSScriptRoot\Modules" 
    Import-Module HealthCheckModules -Force
}
else {
    Write-Host "The module file could not be found, Please ensure it is in the module directory" -ForegroundColor Red
    break
}
Clear-Host
#Setting up some output vars for later use
$overUptimelimit = 0
$overHarddrivelimit = 0
$Replicationerror = 0
$averageUptime = 0
$averageDiskspace = 0
$serviceErrors = 0
$averageCPUload = 0
$overCPUlimit = 0
$overpatchdate = 0
[int]$servercount = 0
[int]$serversucessCount = 0
[int]$servererrorcount = 0
Show-ART # Shows the intro
<# 
Show-Menu Quick Ref.
Menu Opt 1 = Manual Entry
Menu Opt 2 = TXT Entry
Menu Opt 3 = All DC Entry
Menu Opt 4 = Replication Test
Server Type 1 = DC
Server Type 2 = DHCP 
 #>
$MenuSelection = Show-Menu -Title "83 NOS Server Health Check"
if ($MenuSelection.MenuOutput -eq 1) {
    $serverlist = Get-Manualentry
}
elseif ($MenuSelection.MenuOutput -eq 2) {
    $serverlist = Import-TxT
}
elseif ($MenuSelection.MenuOutput -eq 3 -and $MenuSelection.ServerType -eq 1) {
    $GetTheDC = Get-ADDomainController -Filter * | Sort-Object -Descending
    $serverlist = $GetTheDC.name
}
elseif ($menuSelection.MenuOutput -eq 4 -and $MenuSelection.ServerType -eq 1) {
    Get-ReplStatus -serverOpt 5 -showMe
}
else {
    Write-Host "No menu option has been entered, Please re-run the script." -ForegroundColor Red
    Break
}
<# Domain Controller #>
If ($MenuSelection.ServerType -eq "1") {
    Write-Host "Caution!!! You have selected Domain Controller scan, Please ensure you are using your .ADD account!" -ForegroundColor Red
    $creds = Get-Creds
    Test-Creds -DomainController -creders $creds
    foreach ($server in $serverlist) {
        Confirm-Servertype -DomainController -serverName $server
        $testserverconnection = Test-ServerConnection -Targetserver $server
        if ($testserverconnection -eq $false) {
            $servererrorcount++
            continue
        }
        $servercount++
        Write-Host "~=~=~=~=~=~=~=~=~~=~=~=~=~=~=~=~=~~=~=~=~=~=~=~=~=~ Started Scan on $server ~=~=~=~=~=~=~=~=~~=~=~=~=~=~=~=~=~~=~=~=~=~=~=~=~=~" -ForegroundColor Green
        # Checking the last hotfix
        $Gethotfix = Invoke-Command -ComputerName $server -Credential $creds -ScriptBlock {
            Get-HotFix | Sort-Object installedon -Descending | Select-Object -first 1
            return $gethotfix
        } -HideComputerName
        $date = Get-Date
        $Dayssincepatch = $date - $Gethotfix.installedon
        if ($Dayssincepatch.days -ge 35) {
            $overpatchdate++
            Write-Host "The last patch was over $($Dayssincepatch.Days) Days ago, Please Check this." -ForegroundColor Red
        }
        elseif ($Dayssincepatch.days -le 34) {
            Write-Host "The last patch was $($Dayssincepatch.Days) Days ago, Not Action needed!" -ForegroundColor Cyan
        }
        # Checking uptime on the remote server
        $uptime = Invoke-Command -ComputerName $server -Credential $creds -ScriptBlock {
            $bootuptime = (Get-CimInstance -ClassName Win32_OperatingSystem).LastBootUpTime
            $CurrentDate = Get-Date
            $uptime = $CurrentDate - $bootuptime
            return $uptime
        } -HideComputerName
        if ($uptime.Days -ge 14) {
            Write-Host "The current uptime is $($uptime.Days) Days, $($uptime.Hours) Hours. This server may need to be restarted!" -ForegroundColor Red
            $overUptimelimit++
        }
        elseif ($uptime.Days -le 13) {
            Write-Host "The current uptime is $($uptime.Days) Days, $($uptime.Hours) Hours. No action needed!" -ForegroundColor Cyan
        }
        $averageUptime += $uptime.Days
        # Checking core services to ensure they are running 
        $svcstats = Invoke-Command -ComputerName $server -Credential $creds -ScriptBlock { 
            $svcstr = "ADWS", "DFSR", "DNS", "kdc", "Netlogon", "w32Time", "Tumbleweed Desktop Validator"
            foreach ($service in $svcstr) {
                $Getscv = Get-Service $service
                if ($Getscv.Status -notlike "Running") {
                    Write-Host "The Service $($Getscv.DisplayName) was detected as $($Getscv.Status), please investigate this" -ForegroundColor Red
                }
                if ($Getscv.StartType -notlike "Automatic") {
                    Write-Host "The Service $($Getscv.DisplayName) was detected with a startype of $($Getscv.StartType), please investigate this" -ForegroundColor Red
                }
                if ($Getscv.Status -like "Running" -and $Getscv.StartType -like "Automatic") {
                    $svcsucesscount++
                }
                else {
                    $svcerrorcount++
                }
            }
            $Svcdataout = [PSCustomObject]@{
                SvcSucess = $svcsucesscount
                Svcerror  = $svcerrorcount
            }
            Return $Svcdataout
        }
        if ($svcstats.Svcerror -eq 0) {
            Write-Host "Services check complete, no errors found" -ForegroundColor Green
        }
        elseif ($svcstats.Svcerror -ge 1) {
            Write-Host "Services check complete, $($svcstats.svcerror) errors found" -ForegroundColor Red
            $serviceErrors++
        }
        # Checking CPU Load
        $cpuloadstats = Invoke-Command -ComputerName $server -Credential $creds -ScriptBlock { 
            Write-Host "Starting CPU Load test, This will take a moment..." -ForegroundColor Yellow
            $cputest1 = Get-CimInstance win32_processor | Measure-Object -Property LoadPercentage -Average
            Start-Sleep "3"
            $cputest2 = Get-CimInstance win32_processor | Measure-Object -Property LoadPercentage -Average
            Start-Sleep "3"
            $cputest3 = Get-CimInstance win32_processor | Measure-Object -Property LoadPercentage -Average
            Start-Sleep "3"
            $cputest4 = Get-CimInstance win32_processor | Measure-Object -Property LoadPercentage -Average
            Start-Sleep "3"
            $cputest5 = Get-CimInstance win32_processor | Measure-Object -Property LoadPercentage -Average
            $cpuavrgadd = $cputest1.Average + $cputest2.Average + $cputest3.Average + $cputest4.Average + $cputest5.Average
            $cpuavrgdiv = $cpuavrgadd / 5
            $cpuavrgdiv = [math]::round($cpuavrgdiv, 2)
            return $cpuavrgdiv
        } -HideComputerName
        If ($cpuloadstats -ge 70) {
            Write-Host "The CPU load is $cpuloadstats% please manually investigate this server" -ForegroundColor Red
            $overCPUlimit++
        }
        elseif ($cpuloadstats -le 69) {
            Write-Host "The CPU load is $cpuloadstats%, No action required!" -ForegroundColor Cyan
        }
        $averageCPUload += $cpuloadstats
        # Checking Hard Drive space
        $harddrivecheck = Invoke-Command -ComputerName $server -Credential $creds -ScriptBlock {
            $harddrive = Get-CimInstance -ClassName Win32_LogicalDisk | Select-Object -Property DeviceID, @{'Name' = 'FreeSpace'; Expression = { [int]($_.FreeSpace / 1GB) } }
            Return $harddrive
        } -HideComputerName
        $averageDiskspace += $($harddrivecheck[0].FreeSpace) # Adding the diskspace so we can average
        if ($harddrivecheck[0].FreeSpace -le 10) {
            Write-Host "The $($harddrivecheck[0].DeviceID) Drive has $($harddrivecheck[0].FreeSpace)GB remaining. Please check this" -ForegroundColor Red
            $overHarddrivelimit++
        }
        elseif ($harddrivecheck[0].FreeSpace -ge 11) {
            Write-Host "The $($harddrivecheck[0].DeviceID) Drive has $($harddrivecheck[0].FreeSpace)GB remaining" -ForegroundColor Green
        }
        # Checking Replication
        $repltest = Get-replstatus -serveropt 6 -serverName $server -showMe
        if ($repltest -notlike "Success") {
            $Replicationerror++
        }
        $serversucessCount++
    }
    Write-Host "Would you like to output the results of this checK?
[1] Yes
[2] No" -ForegroundColor Yellow
    Do {
        $outopt = Read-Host "Select an option 1-2"
    }
    while (1..2 -notcontains $outopt)
    if ($outopt -eq 1 ) {
        Get-OutputMetrics -Replicationerrors $Replicationerror -HardDriveError $overHarddrivelimit -AverageHarddrivespace $averageDiskspace -ServiceError $serviceErrors -CPUerror $overCPUlimit -CPUaverage $averageCPUload -AverageUptime $averageUptime -UptimeError $overUptimelimit -TotalServers $serversucess -overpatchdate $overpatchdate -output
    }
    elseif ($outopt -eq 2) {
        Get-OutputMetrics -Replicationerrors $Replicationerror -HardDriveError $overHarddrivelimit -AverageHarddrivespace $averageDiskspace -ServiceError $serviceErrors -CPUerror $overCPUlimit -CPUaverage $averageCPUload -AverageUptime $averageUptime -UptimeError $overUptimelimit -TotalServers $serversucess -overpatchdate $overpatchdate
    }
    else {
        Write-Host "No Option was selected. Results will not be output"
        Get-OutputMetrics -Replicationerrors $Replicationerror -HardDriveError $overHarddrivelimit -AverageHarddrivespace $averageDiskspace -ServiceError $serviceErrors -CPUerror $overCPUlimit -CPUaverage $averageCPUload -AverageUptime $averageUptime -UptimeError $overUptimelimit -TotalServers $serversucess -overpatchdate $overpatchdate
    }
    Pause
}
<# DHCP Server #>
elseif ($menselection.ServerType -eq "2") {
    Write-Host "Caution!!! You have selected DHCP scan, Please ensure you are using your .ADC account!" -ForegroundColor Red
    $creds = Get-Creds
    Test-Creds -DHCP -credentials $creds
    <# TODO DHCP SCAN #>
}
